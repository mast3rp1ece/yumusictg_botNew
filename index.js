const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
require('dotenv').config()
const text = require('./const')
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
require('object.fromentries').shim();
const express = require('express')
const app = express()
 
app.get('/', function (req, res) {
  res.send('Hello World')
})
 
app.listen(3000)

const EventEmitter = require('events');
EventEmitter.defaultMaxListeners = 0;
const bot = new Telegraf(process.env.BOT_TOKEN);


const filePath = path.join(__dirname, 'chat_ids.txt');


function saveChatId(chatId) {
  const chatIds = getSavedChatIds();
  if (!chatIds.has(chatId)) {
    chatIds.add(chatId);
    updateChatIdsFile(chatIds);
  }
}


function getSavedChatIds() {
  const data = fs.readFileSync(filePath, 'utf8');
  const chatIds = new Set(data.trim().split('\n'));
  return chatIds;
}

function updateChatIdsFile(chatIds) {
  const chatIdsArray = Array.from(chatIds);
  const content = chatIdsArray.join('\n');
  fs.writeFileSync(filePath, content, 'utf-8');
  console.log(chatIds)
}

async function sendMessageToAllUsers(message) {
  const chatIds = getSavedChatIds();
  for (const chatId of chatIds) {
    try {
      await bot.telegram.sendMessage(chatId, message);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ chat_id ${chatId}:`, error);
    }
  }
}
// bot.on('text', async (ctx) => {
// 	const messageText = ctx.message.text;
// 	if (messageText.startsWith('/sendToAllUsers')) {
// 	  const messageToAllUsers = messageText.replace('/sendToAllUsers', '').trim();
// 	  await sendMessageToAllUsers(messageToAllUsers);
// 	} else {
// 	  // –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—É—Ç
// 	}
//  });
bot.command('start', (ctx) => {
  ctx.reply(`–ü—Ä–∏–≤—ñ—Ç ${ctx.message.from.first_name ? ctx.message.from.first_name : '–î—Ä—É–∂–µ'}üëã –Ø —Å—Ç–≤–æ—Ä–∏–≤ —Ü—å–æ–≥–æ –±–æ—Ç–∞, —â–æ–± –≤–∏ –Ω–µ –∑–∞–±—É–≤–∞–ª–∏ —Å–ø–ª–∞—á—É–≤–∞—Ç–∏ —â–æ–º—ñ—Å—è—á–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É "Youtube Music"üòâ –©–æ–º—ñ—Å—è—Ü—è, 18-–≥–æ —á–∏—Å–ª–∞, –≤–∞–º –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è) –ø—Ä–æ –æ–ø–ª–∞—Ç—Éüòä`, {
    reply_markup: {
      keyboard: [
        ['üí∞–û–ø–ª–∞—Ç–∞']
      ],
      resize_keyboard: true
    }
  });
  console.log(ctx.message)
  const chatId = ctx.message.chat.id;
  saveChatId(chatId); // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id
});

bot.hears('üí∞–û–ø–ª–∞—Ç–∞', async (ctx) => {
	try {
		await ctx.replyWithHTML('<b>üí≥–û–ø–ª–∞—Ç–∞</b>', Markup.inlineKeyboard(
			[
				[Markup.button.callback('‚ö´Ô∏èMono‚ö´Ô∏è', 'btn_1'), Markup.button.callback('üü°Raiffeisenüü°', 'btn_2')],
				[Markup.button.callback("üÜò–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑—ñ –º–Ω–æ—éüÜò", 'btn_3')]
			]
		))
	} catch (e) {
		console.error(e)
	}
})

bot.help((ctx) => ctx.reply(text.commands));


bot.on(message('text'), async (ctx) => {
	await ctx.replyWithHTML(`${ctx.message.from.first_name ? ctx.message.from.first_name : '–î—Ä—É–∂–µ'}, —è —Ç–µ–±–µ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ü•∫
–ë—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ <b>"–û–ø–ª–∞—Ç–∞"</b> –≤ –º–µ–Ω—éüòÉ`);
 })

function addActionBot(name, src, text) {
	bot.action(name, async (ctx) => {
		try {
			await ctx.answerCbQuery()
			if (src !== false) {
				await ctx.replyWithPhoto({
					source: src
				})
			}
			await ctx.replyWithHTML(text, {
				disable_web_page_preview: true
			})
		}catch (e) {
			console.error(e)
		}
	})
}
addActionBot('btn_1', false, text.mono)
addActionBot('btn_2', false, text.raiff)
addActionBot('btn_3', false, text.contact)

async function sendMonthlyMessage(chatId) {
  try {
    const chatMember = await bot.telegram.getChatMember(chatId, chatId);
    if (chatMember.status !== 'left' && chatMember.status !== 'kicked') {
      const message = '–ü—Ä–∏–≤—ñ—Çüëã, —Ü–µ —â–æ–º—ñ—Å—è—á–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è–º "Youtube Misuc" —É —Ä–æ–∑–º—ñ—Ä—ñ - "20–≥—Ä–Ω"ü§ë –†–æ–º–∞, –≤ —Ç–µ–±–µ - "40–≥—Ä–Ω"';
      await bot.telegram.sendMessage(chatId, message);
    }
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ chat_id ${chatId}:`, error);
  }
}
 

function sendMonthlyMessagesToAllUsers() {
	fs.readFile("chat_ids.txt", "utf-8", (err, data) => {
	  if (err) throw err;
	  const chatIds = data.split("\n");
	  for (const chatId of chatIds) {
	  const trimmedChatId = chatId.trim();
      if (trimmedChatId !== '') {
        sendMonthlyMessage(trimmedChatId);
		}
	  }
	});
}

cron.schedule("0 12 18 * *", () => {
	sendMonthlyMessagesToAllUsers();
}, {
	scheduled: true,
	timezone: 'Europe/Kiev',
});

bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));